import telebot
from telebot import types
from parsing import parsingbtc

from keyboard import webAppKeyboard
from keyboard import webAppKeyboard2
from webappuser import webappuser

import os

import  os 
os.environ["TB"] = "my val"

bot = telebot.TeleBot(os.getenv('TOKENBOT'))


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttonA  = types.KeyboardButton("–ù–∞—á–∞—Ç—å")
    markup.add(buttonA)
    bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø —Å–ø—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —Å–æ—Ü. —Å–µ—Ç–µ–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ.".format(message.from_user), reply_markup=markup)

@bot.message_handler(content_types=['text'])
def twomessage(message):

    if message.text =='–ù–∞—á–∞—Ç—å':
        bot.reply_to(message, '–ù–∞—á–Ω—ë–º)', reply_markup=webAppKeyboard()) 

    elif message.text == '‚ñ∂–î–∞–ª–µ–µ‚ñ∂':
        bot.reply_to(message, '–û–∫–µ–π, –±–æ—Å—Å, –¥–∞–ª–µ–µ)', reply_markup=webAppKeyboard2()) 

    elif message.text == '‚óÄ–ù–∞–∑–∞–¥‚óÄ':
        bot.reply_to(message, '–û–∫–µ–π, –±–æ—Å—Å, –Ω–∞–∑–∞–¥)', reply_markup=webAppKeyboard())
    
    elif message.text == '‚óÄ–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ñ∂':
        bot.reply_to(message, '–û–∫–µ–π, –±–æ—Å—Å)', reply_markup=webAppKeyboard())

    elif message.text == 'btc':
        bot.send_message(message.chat.id, '–ö—É—Ä—Å –±–∏—Ç–∫–æ–π–Ω–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏')
        parsingbtc(message)

    elif message.text == '–°–≤–æ–π WebApp':
        bot.send_message(message.chat.id, '–≤—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç')

    elif message.text[0] == 'h' and message.text[1] == 't' and message.text[2] == 't' and message.text[3] == 'p':
        webappuser(message)

    elif message.text == '‚ÑπÔ∏è–î–æ–ø –∏–Ω—Ñ–æ':
        markup2 = types.InlineKeyboardMarkup()
        menubtn1 = types.InlineKeyboardButton('üì±–ì—Ä—É–ø–ø–∞)', url= 'https://t.me/+epS_MvNUhFYxMTUy')
        menubtn2 = types.InlineKeyboardButton('üì∫–ö–∞–Ω–∞–ª)', url= 'https://t.me/YouHubTubeCh')        
        menubtn3 = types.InlineKeyboardButton('‚ùå–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', callback_data='delete')
        menubtn4 = types.InlineKeyboardButton('‚úÖ–ù–∞–∂–∏–º–∞—Ç—å', url='https://youtu.be/dQw4w9WgXcQ?si=YM23TnMN56NtO3p3') 
        menubtn5 = types.InlineKeyboardButton('üÜïnew', callback_data='mnbtn5')
       
        markup2.row(menubtn1,menubtn2)
        markup2.row(menubtn3,menubtn4)
        markup2.row(menubtn5)
        bot.reply_to(message, '–¢—ã –º–æ–∂–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É, –≥–¥–µ –º–æ–∂–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏, –∏ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª)üòÅ', reply_markup = markup2)


@bot.callback_query_handler(func=lambda callback: callback.data)
def callback_message(callback):
    if callback.data == 'delete':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
    elif callback.data == 'back':
        mk0 = types.InlineKeyboardMarkup()
        menubtn1 = types.InlineKeyboardButton('üì±–ì—Ä—É–ø–ø–∞)', url= 'https://t.me/+epS_MvNUhFYxMTUy')
        menubtn2 = types.InlineKeyboardButton('üì∫–ö–∞–Ω–∞–ª)', url= 'https://t.me/YouHubTubeCh')        
        menubtn3 = types.InlineKeyboardButton('‚ùå–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', callback_data='delete')
        menubtn4 = types.InlineKeyboardButton('‚úÖ–ù–∞–∂–∏–º–∞—Ç—å', url='https://youtu.be/dQw4w9WgXcQ?si=YM23TnMN56NtO3p3') 
        menubtn5 = types.InlineKeyboardButton('üÜïnew', callback_data='mnbtn5')
        mk0.row(menubtn1,menubtn2)
        mk0.row(menubtn3,menubtn4)
        mk0.row(menubtn5)

        bot.send_message(callback.message.chat.id, '–¢—ã –º–æ–∂–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É, –≥–¥–µ –º–æ–∂–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏, –∏ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª)üòÅ', reply_markup=mk0)
        bot.delete_message(callback.message.chat.id, callback.message.message_id)


    elif callback.data == "mnbtn5":
        mk = types.InlineKeyboardMarkup()
        inbtn1 = types.InlineKeyboardButton('üì∫–ö–∞–Ω–∞–ª)', url='https://t.me/YouHubTubeCh')
        inbtn2 = types.InlineKeyboardButton('back', callback_data='back')
        mk.row(inbtn1, inbtn2)
        bot.send_message(callback.message.chat.id, text=' –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –¥–ª—è —á–µ–≥–æ —ç—Ç–æ—Ç –æ—Ç–¥–µ–ªüòê', reply_markup=mk)
        bot.delete_message(callback.message.chat.id, callback.message.message_id)


bot.polling(none_stop=True, interval=0)







# @bot.message_handler(content_types=['text'])
# def get_text_messages(message):

#     if message.text == "–ü—Ä–∏–≤–µ—Ç":
#         bot.send_message(message.from_user.id,"–ü—Ä–∏–≤–µ—Ç")
#     elif message.text == '/help':
#         bot.send_message(message.from_user.id,'–ù–∞–ø–∏—à–∏ "–ü—Ä–∏–≤–µ—Ç"')
#     else:
#         bot.send_message(message.from_user.id, '–ú–æ—è—Ç–≤–æ—è–Ω–µ–ø–æ–Ω–∏–º–∞—Ç –ù–∞–∂–º–∏ —Å—é–¥–∞ -> /help')

# bot.polling(none_stop=True, interval=0)

















# @bot.message_handler(content_types=["text"])
# def repeat_all_messages(message): # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∏–≥—Ä–∞–µ—Ç –Ω–∏–∫–∞–∫–æ–π —Ä–æ–ª–∏
#     bot.send_message(message.chat.id, message.text)

# if __name__ == '__main__':
#      bot.infinity_polling()